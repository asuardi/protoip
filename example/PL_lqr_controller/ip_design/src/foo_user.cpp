/* 
* icl::protoip
* Author: asuardi <https://github.com/asuardi>
* Date: November - 2014
*/


#include "foo_data.h"


//row, column
static data_t_x0_in K0[U_OUT_LENGTH][X0_IN_LENGTH]={
{-0.9812238359676559400000000000000000000000,-0.0000000000000000000000000000000000000000,0.0469790021990090160000000000000000000000,-55.6042404299846280000000000000000000000000,-0.0000000000000000000000000000000000000000,-0.0213817968260723300000000000000000000000},
{-0.0000000000000000000000000000000000000000,-0.9812053585479187900000000000000000000000,-0.0000000000000000000000000000000000000000,-0.0000000000000000000000000000000000000000,-55.6041804872796210000000000000000000000000,-0.0000000000000000000000000000000000000000},
{-0.0469787260330969190000000000000000000000,-0.0000000000000000000000000000000000000000,-0.9846289259123153200000000000000000000000,0.0259034454610759560000000000000000000000,-0.0000000000000000000000000000000000000000,-55.6986907583232520000000000000000000000000},
};

//column
static data_t_u_out u_min[U_OUT_LENGTH]={
-64.0000000000000000000000000000000000000000,-64.0000000000000000000000000000000000000000,-64.0000000000000000000000000000000000000000};

//column
static data_t_u_out u_max[U_OUT_LENGTH]={
64.0000000000000000000000000000000000000000,64.0000000000000000000000000000000000000000,64.0000000000000000000000000000000000000000};

void foo_user(  data_t_x0_in x0_in_int[X0_IN_LENGTH],
				data_t_x_ref_in x_ref_in_int[X_REF_IN_LENGTH],
				data_t_u_out u_out_int[U_OUT_LENGTH])
{


	data_t_x0_in  x_in_diff;
	data_t_u_out  u_tmp_temp_mult;
	data_t_u_out u_tmp_temp_add;
	data_t_u_out u_tmp[U_OUT_LENGTH];
	
	///////////////////////////////////////
	//LQR algorithm :
	nu_loop: for(int i = 0; i < U_OUT_LENGTH; i++)
	{

		u_tmp_temp_add = 0;
		

		nx_loop: for(int j = 0; j <X0_IN_LENGTH; j++)
			{
				x_in_diff=x0_in_int[j]-x_ref_in_int[j];
				u_tmp_temp_mult = (data_t_u_out)(K0[i][j] * x_in_diff);
				u_tmp_temp_add += u_tmp_temp_mult;

			}

		u_tmp[i] = u_tmp_temp_add;

		//saturation
		if (u_tmp[i]>u_max[i])
			u_out_int[i]=u_max[i];
		else if (u_tmp[i]<u_min[i])
			u_out_int[i]=u_min[i];
		else
			u_out_int[i]=u_tmp[i];

	}



}
